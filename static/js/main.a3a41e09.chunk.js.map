{"version":3,"sources":["Components/Card/card.component.jsx","Components/Card-List/Card-list.component.jsx","Components/Search box/SearchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","name","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","array","_this$state","filteredMonsters","filter","toLowerCase","includes","SearchBox_component_SearchBox","Card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mTAGaA,eAAO,SAAAC,GAAK,OAErBC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBAGbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,QAAQC,GAAxC,4BACtBR,EAAAC,EAAAC,cAAA,cAAMH,EAAMQ,QAAQE,KAApB,QCHKC,EAAW,SAAAX,GAExB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aAEtBJ,EAAMY,SAASC,IAAI,SAAAL,GAAO,OAAKP,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKP,EAAQC,GAAID,QAAUA,QCPpDQ,SAAW,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAYC,EAAdF,EAAcE,aAAd,OACpBlB,EAAAC,EAAAC,cAAA,SAAOiB,KAAM,SACbhB,UAAU,SACTc,YAAaA,EACbG,SAAWF,MC0CDG,qBA1Cb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAeJP,aAAe,SAACW,GACdP,EAAKQ,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAflCX,EAAKY,MAAM,CACVvB,SAAS,GACToB,YAAY,IAJFT,mFASI,IAAAa,EAAAV,KACjBW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAM,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAACnB,SAAS6B,uCAQhC,IAAAC,EAC4BhB,KAAKS,MAAhCvB,EADD8B,EACC9B,SAAWoB,EADZU,EACYV,YACZW,EAAkB/B,EAASgC,OAAO,SAAApC,GAAO,OAC5CA,EAAQE,KAAKmC,cAAcC,SAASd,EAAYa,iBACnD,OACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BAEAF,EAAAC,EAAAC,cAAC4C,EAAD,CAAW7B,YAAY,kBACvBC,aAAcO,KAAKP,eAGnBlB,EAAAC,EAAAC,cAAC6C,EAAD,CAAUpC,SAAU+B,YAjCVM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPvD,EAAAC,EAAAC,cAACF,EAAAC,EAAMuD,WAAP,KACExD,EAAAC,EAAAC,cAACuD,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,KAAK,SAAA0B,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.a3a41e09.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props =>(\r\n\r\n    <div className = 'card-container' >\r\n       \r\n   \r\n        <img alt=\"Monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2> {props.monster.name} </h2>\r\n      \r\n\r\n    </div>\r\n);\r\n\r\n","\r\n\r\nimport React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../Card/card.component';\r\n\r\nexport const CardList = props => {\r\n   \r\nreturn <div className ='card-list'>\r\n\r\n{props.monsters.map(monster => (<Card key={monster.id} monster= {monster} /> ) )}\r\n\r\n</div>;\r\n};","import React from 'react';\r\nimport './SearchBox.styles.css';\r\n\r\nexport const SearchBox =({placeholder,handleChange}) =>(\r\n    <input type ='search'\r\n    className='search'\r\n     placeholder={placeholder} \r\n     onChange= {handleChange}>\r\n\r\n     </input>\r\n);","import React, {Component} from 'react';\nimport {CardList} from './Components/Card-List/Card-list.component';\nimport {SearchBox} from './Components/Search box/SearchBox.component';\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n     monsters:[ ],\n     searchField:''\n   \n    };\n  }\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then (array => this.setState({monsters:array}));\n\n}\n\nhandleChange = (e) =>{\n  this.setState({searchField:e.target.value})\n}\n\n  render(){\n    const {monsters , searchField } = this.state ;\n    const filteredMonsters =monsters.filter(monster => \n       monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n       \n        <SearchBox placeholder='Search Monsters' \n        handleChange={this.handleChange}\n          />\n\n        <CardList monsters={filteredMonsters}/>\n        \n      </div>\n\n    );\n\n  }\n\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}